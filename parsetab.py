
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTIDIVIrightIDNUMleftDPARENIPARENSUMA RESTA MULTI DIVI MENOR MENORI MAYOR MAYORI IGUAL DIST ASIGN IPAREN DPAREN ICORCH DCORCH ILLAVE DLLAVE COMA PUNTOC NUM ID RESERVED RETURN INT VOID ELSE WHILE IFprogram : declarationListdeclarationList : declarationList declarationdeclarationList : declarationdeclaration : varDeclarationdeclaration : funDeclarationvarDeclaration : typeSpecifier ID PUNTOCvarDeclaration : typeSpecifier ID ICORCH NUM DCORCH PUNTOCtypeSpecifier : INTtypeSpecifier : VOIDfunDeclaration : typeSpecifier ID IPAREN params DPAREN compoundStmtparams : paramListparams : VOIDparamList : paramList COMA paramparamList : paramparam : typeSpecifier IDparam : typeSpecifier ID ICORCH DCORCHcompoundStmt : ILLAVE localDeclarations statementList DLLAVElocalDeclarations : localDeclarations varDeclarationlocalDeclarations :  emptystatementList : statementList statementstatementList : emptystatement : expressionStmtstatement : compoundStmtstatement : selectionStmtstatement : iterationStmtstatement : returnStmtexpressionStmt : statementList statement PUNTOCexpressionStmt : PUNTOCselectionStmt : IF IPAREN expression DPAREN statementselectionStmt :  IF IPAREN expression DPAREN statement ELSE statementiterationStmt :  WHILE IPAREN expression DPAREN statementreturnStmt :  RETURN PUNTOCreturnStmt :  RETURN expression PUNTOCexpression :  var ASIGN expressionexpression :  simpleExpressionvar :  IDvar :  ID ICORCH expression DCORCHsimpleExpression :  additiveExpression relop additiveExpressionsimpleExpression :  additiveExpressionrelop : MENORIrelop : MENORrelop : MAYORrelop : MAYORIrelop : IGUALrelop : DISTadditiveExpression : additiveExpression addop termadditiveExpression : termaddop : SUMAaddop : RESTAterm : term mulop factorterm : factormulop : MULTImulop : DIVIfactor : IPAREN expression DPARENfactor : varfactor : callfactor : NUMcall : ID IPAREN args DPARENargs : argListargs : emptyargList : argList COMA expressionargList : expressionempty :'
    
_lr_action_items = {'MULTI':([50,53,54,55,56,59,84,85,87,88,97,98,],[74,-56,-51,-55,-57,-36,74,-55,-50,-54,-37,-58,]),'RETURN':([13,24,26,30,31,32,33,35,37,38,41,42,43,44,45,46,47,57,62,78,83,95,96,100,101,103,104,],[-6,-7,-63,-19,-63,-18,36,-21,-24,-17,36,-22,-20,-26,-28,-23,-25,-32,-20,-33,-27,36,36,-29,-31,36,-30,]),'VOID':([0,1,3,6,7,9,12,13,23,24,26,27,30,31,32,38,],[4,-4,4,-3,-5,-2,15,-6,4,-7,-63,-10,-19,4,-18,-17,]),'ILLAVE':([13,22,24,26,30,31,32,33,35,37,38,41,42,43,44,45,46,47,57,62,78,83,95,96,100,101,103,104,],[-6,26,-7,-63,-19,-63,-18,26,-21,-24,-17,26,-22,-20,-26,-28,-23,-25,-32,-20,-33,-27,26,26,-29,-31,26,-30,]),'IGUAL':([49,50,53,54,55,56,59,84,85,87,88,97,98,],[68,-47,-56,-51,-55,-57,-36,-46,-55,-50,-54,-37,-58,]),'WHILE':([13,24,26,30,31,32,33,35,37,38,41,42,43,44,45,46,47,57,62,78,83,95,96,100,101,103,104,],[-6,-7,-63,-19,-63,-18,40,-21,-24,-17,40,-22,-20,-26,-28,-23,-25,-32,-20,-33,-27,40,40,-29,-31,40,-30,]),'DCORCH':([14,25,49,50,52,53,54,55,56,59,84,85,86,87,88,89,90,97,98,],[20,29,-39,-47,-35,-56,-51,-55,-57,-36,-46,-55,-38,-50,-54,-34,97,-37,-58,]),'DIST':([49,50,53,54,55,56,59,84,85,87,88,97,98,],[64,-47,-56,-51,-55,-57,-36,-46,-55,-50,-54,-37,-58,]),'RESTA':([49,50,53,54,55,56,59,84,85,86,87,88,97,98,],[70,-47,-56,-51,-55,-57,-36,-46,-55,70,-50,-54,-37,-58,]),'SUMA':([49,50,53,54,55,56,59,84,85,86,87,88,97,98,],[72,-47,-56,-51,-55,-57,-36,-46,-55,72,-50,-54,-37,-58,]),'IPAREN':([10,36,39,40,51,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,99,],[12,51,60,61,51,80,51,51,51,-45,51,-43,-40,-44,-41,-49,-42,-48,-53,-52,51,51,51,51,51,]),'NUM':([11,36,51,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,99,],[14,56,56,56,56,56,-45,56,-43,-40,-44,-41,-49,-42,-48,-53,-52,56,56,56,56,56,]),'PUNTOC':([10,13,20,24,26,30,31,32,33,35,36,37,38,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,62,78,83,84,85,86,87,88,89,95,96,97,98,100,101,103,104,],[13,-6,24,-7,-63,-19,-63,-18,45,-21,57,-24,-17,45,-22,-20,-26,-28,-23,-25,13,-39,-47,-35,-56,-51,-55,-57,-32,78,-36,83,-33,-27,-46,-55,-38,-50,-54,-34,45,45,-37,-58,-29,-31,45,-30,]),'MAYOR':([49,50,53,54,55,56,59,84,85,87,88,97,98,],[71,-47,-56,-51,-55,-57,-36,-46,-55,-50,-54,-37,-58,]),'$end':([1,3,5,6,7,9,13,24,27,38,],[-4,-1,0,-3,-5,-2,-6,-7,-10,-17,]),'DIVI':([50,53,54,55,56,59,84,85,87,88,97,98,],[73,-56,-51,-55,-57,-36,73,-55,-50,-54,-37,-58,]),'ICORCH':([10,21,48,59,],[11,25,11,79,]),'DPAREN':([15,17,18,19,21,28,29,49,50,52,53,54,55,56,59,76,80,81,82,84,85,86,87,88,89,91,92,93,94,97,98,102,],[-12,22,-14,-11,-15,-13,-16,-39,-47,-35,-56,-51,-55,-57,-36,88,-63,95,96,-46,-55,-38,-50,-54,-34,98,-59,-62,-60,-37,-58,-61,]),'ELSE':([37,38,42,44,45,46,47,57,78,83,100,101,104,],[-24,-17,-22,-26,-28,-23,-25,-32,-33,-27,-29,-31,-30,]),'COMA':([18,19,21,28,29,49,50,52,53,54,55,56,59,84,85,86,87,88,89,92,93,97,98,102,],[-14,23,-15,-13,-16,-39,-47,-35,-56,-51,-55,-57,-36,-46,-55,-38,-50,-54,-34,99,-62,-37,-58,-61,]),'ASIGN':([55,59,97,],[77,-36,-37,]),'ID':([2,4,8,15,16,34,36,51,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,99,],[-8,-9,10,-9,21,48,59,59,59,59,59,-45,59,-43,-40,-44,-41,-49,-42,-48,-53,-52,59,59,59,59,59,]),'IF':([13,24,26,30,31,32,33,35,37,38,41,42,43,44,45,46,47,57,62,78,83,95,96,100,101,103,104,],[-6,-7,-63,-19,-63,-18,39,-21,-24,-17,39,-22,-20,-26,-28,-23,-25,-32,-20,-33,-27,39,39,-29,-31,39,-30,]),'MAYORI':([49,50,53,54,55,56,59,84,85,87,88,97,98,],[66,-47,-56,-51,-55,-57,-36,-46,-55,-50,-54,-37,-58,]),'DLLAVE':([13,24,26,30,31,32,33,35,37,38,42,43,44,45,46,47,57,78,83,100,101,104,],[-6,-7,-63,-19,-63,-18,38,-21,-24,-17,-22,-20,-26,-28,-23,-25,-32,-33,-27,-29,-31,-30,]),'MENORI':([49,50,53,54,55,56,59,84,85,87,88,97,98,],[67,-47,-56,-51,-55,-57,-36,-46,-55,-50,-54,-37,-58,]),'INT':([0,1,3,6,7,9,12,13,23,24,26,27,30,31,32,38,],[2,-4,2,-3,-5,-2,2,-6,2,-7,-63,-10,-19,2,-18,-17,]),'MENOR':([49,50,53,54,55,56,59,84,85,87,88,97,98,],[69,-47,-56,-51,-55,-57,-36,-46,-55,-50,-54,-37,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'varDeclaration':([0,3,31,],[1,1,32,]),'selectionStmt':([33,41,95,96,103,],[37,37,37,37,37,]),'statementList':([31,33,41,95,96,103,],[33,41,41,41,41,41,]),'simpleExpression':([36,51,60,61,77,79,80,99,],[52,52,52,52,52,52,52,52,]),'args':([80,],[91,]),'param':([12,23,],[18,28,]),'program':([0,],[5,]),'params':([12,],[17,]),'statement':([33,41,95,96,103,],[43,62,100,101,104,]),'factor':([36,51,60,61,63,65,75,77,79,80,99,],[54,54,54,54,54,54,87,54,54,54,54,]),'var':([36,51,60,61,63,65,75,77,79,80,99,],[55,55,55,55,85,85,85,55,55,55,55,]),'call':([36,51,60,61,63,65,75,77,79,80,99,],[53,53,53,53,53,53,53,53,53,53,53,]),'argList':([80,],[92,]),'iterationStmt':([33,41,95,96,103,],[47,47,47,47,47,]),'localDeclarations':([26,],[31,]),'additiveExpression':([36,51,60,61,65,77,79,80,99,],[49,49,49,49,86,49,49,49,49,]),'addop':([49,86,],[63,63,]),'funDeclaration':([0,3,],[7,7,]),'paramList':([12,],[19,]),'declarationList':([0,],[3,]),'declaration':([0,3,],[6,9,]),'returnStmt':([33,41,95,96,103,],[44,44,44,44,44,]),'compoundStmt':([22,33,41,95,96,103,],[27,46,46,46,46,46,]),'term':([36,51,60,61,63,65,77,79,80,99,],[50,50,50,50,84,50,50,50,50,50,]),'relop':([49,],[65,]),'expressionStmt':([33,41,95,96,103,],[42,42,42,42,42,]),'empty':([26,31,33,41,80,95,96,103,],[30,35,35,35,94,35,35,35,]),'mulop':([50,84,],[75,75,]),'expression':([36,51,60,61,77,79,80,99,],[58,76,81,82,89,90,93,102,]),'typeSpecifier':([0,3,12,23,31,],[8,8,16,16,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarationList','program',1,'p_program','parser.py',19),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declaration_list1','parser.py',24),
  ('declarationList -> declaration','declarationList',1,'p_declaration_list2','parser.py',37),
  ('declaration -> varDeclaration','declaration',1,'p_declaration1','parser.py',42),
  ('declaration -> funDeclaration','declaration',1,'p_declaration2','parser.py',47),
  ('varDeclaration -> typeSpecifier ID PUNTOC','varDeclaration',3,'p_var_declaration1','parser.py',52),
  ('varDeclaration -> typeSpecifier ID ICORCH NUM DCORCH PUNTOC','varDeclaration',6,'p_var_declaration2','parser.py',57),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_type_specifier1','parser.py',62),
  ('typeSpecifier -> VOID','typeSpecifier',1,'p_type_specifier2','parser.py',67),
  ('funDeclaration -> typeSpecifier ID IPAREN params DPAREN compoundStmt','funDeclaration',6,'p_fun_declaration','parser.py',72),
  ('params -> paramList','params',1,'p_params1','parser.py',77),
  ('params -> VOID','params',1,'p_params2','parser.py',81),
  ('paramList -> paramList COMA param','paramList',3,'p_paramList1','parser.py',85),
  ('paramList -> param','paramList',1,'p_paramList2','parser.py',89),
  ('param -> typeSpecifier ID','param',2,'p_param1','parser.py',93),
  ('param -> typeSpecifier ID ICORCH DCORCH','param',4,'p_param2','parser.py',97),
  ('compoundStmt -> ILLAVE localDeclarations statementList DLLAVE','compoundStmt',4,'p_compoundStmt','parser.py',101),
  ('localDeclarations -> localDeclarations varDeclaration','localDeclarations',2,'p_localDeclarations1','parser.py',106),
  ('localDeclarations -> empty','localDeclarations',1,'p_localDeclarationsEmpty','parser.py',110),
  ('statementList -> statementList statement','statementList',2,'p_statementList1','parser.py',115),
  ('statementList -> empty','statementList',1,'p_statementListEmpty','parser.py',119),
  ('statement -> expressionStmt','statement',1,'p_statement1','parser.py',123),
  ('statement -> compoundStmt','statement',1,'p_statement2','parser.py',127),
  ('statement -> selectionStmt','statement',1,'p_statement3','parser.py',131),
  ('statement -> iterationStmt','statement',1,'p_statement4','parser.py',135),
  ('statement -> returnStmt','statement',1,'p_statement5','parser.py',139),
  ('expressionStmt -> statementList statement PUNTOC','expressionStmt',3,'p_expressionStmt1','parser.py',143),
  ('expressionStmt -> PUNTOC','expressionStmt',1,'p_expressionStmt2','parser.py',147),
  ('selectionStmt -> IF IPAREN expression DPAREN statement','selectionStmt',5,'p_selectionStmt1','parser.py',151),
  ('selectionStmt -> IF IPAREN expression DPAREN statement ELSE statement','selectionStmt',7,'p_selectionStmt2','parser.py',155),
  ('iterationStmt -> WHILE IPAREN expression DPAREN statement','iterationStmt',5,'p_iterationStmt','parser.py',159),
  ('returnStmt -> RETURN PUNTOC','returnStmt',2,'p_returnStmt1','parser.py',163),
  ('returnStmt -> RETURN expression PUNTOC','returnStmt',3,'p_returnStmt2','parser.py',167),
  ('expression -> var ASIGN expression','expression',3,'p_expression1','parser.py',171),
  ('expression -> simpleExpression','expression',1,'p_expression2','parser.py',175),
  ('var -> ID','var',1,'p_var1','parser.py',179),
  ('var -> ID ICORCH expression DCORCH','var',4,'p_var2','parser.py',183),
  ('simpleExpression -> additiveExpression relop additiveExpression','simpleExpression',3,'p_simpleExpression1','parser.py',187),
  ('simpleExpression -> additiveExpression','simpleExpression',1,'p_simpleExpression2','parser.py',191),
  ('relop -> MENORI','relop',1,'p_relop1','parser.py',195),
  ('relop -> MENOR','relop',1,'p_relop2','parser.py',199),
  ('relop -> MAYOR','relop',1,'p_relop3','parser.py',203),
  ('relop -> MAYORI','relop',1,'p_relop4','parser.py',207),
  ('relop -> IGUAL','relop',1,'p_relop5','parser.py',211),
  ('relop -> DIST','relop',1,'p_relop6','parser.py',215),
  ('additiveExpression -> additiveExpression addop term','additiveExpression',3,'p_additiveExpression1','parser.py',219),
  ('additiveExpression -> term','additiveExpression',1,'p_additiveExpression2','parser.py',223),
  ('addop -> SUMA','addop',1,'p_addop1','parser.py',227),
  ('addop -> RESTA','addop',1,'p_addop2','parser.py',231),
  ('term -> term mulop factor','term',3,'p_term1','parser.py',235),
  ('term -> factor','term',1,'p_term2','parser.py',239),
  ('mulop -> MULTI','mulop',1,'p_mulop1','parser.py',243),
  ('mulop -> DIVI','mulop',1,'p_mulop2','parser.py',247),
  ('factor -> IPAREN expression DPAREN','factor',3,'p_factor1','parser.py',251),
  ('factor -> var','factor',1,'p_factor2','parser.py',255),
  ('factor -> call','factor',1,'p_factor3','parser.py',259),
  ('factor -> NUM','factor',1,'p_factor4','parser.py',263),
  ('call -> ID IPAREN args DPAREN','call',4,'p_call','parser.py',267),
  ('args -> argList','args',1,'p_args1','parser.py',271),
  ('args -> empty','args',1,'p_argsEmpty','parser.py',275),
  ('argList -> argList COMA expression','argList',3,'p_argList1','parser.py',279),
  ('argList -> expression','argList',1,'p_argList2','parser.py',283),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',287),
]
