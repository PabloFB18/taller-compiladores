
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTIDIVIrightIDNUMleftDPARENIPARENSUMA RESTA MULTI DIVI MENOR MENORI MAYOR MAYORI IGUAL DIST ASIGN IPAREN DPAREN ICORCH DCORCH ILLAVE DLLAVE COMA PUNTOC NUM ID RESERVED RETURN INT VOID ELSE WHILE IFprogram : declarationListdeclarationList : declarationList declarationdeclarationList : declarationdeclaration : varDeclarationdeclaration : funDeclarationvarDeclaration : typeSpecifier ID PUNTOCvarDeclaration : typeSpecifier ID ICORCH NUM DCORCH PUNTOCtypeSpecifier : INTtypeSpecifier : VOIDfunDeclaration : typeSpecifier ID IPAREN params DPAREN compoundStmtparams : paramListparams : VOIDparamList : paramList COMA paramparamList : paramparam : typeSpecifier IDparam : typeSpecifier ID ICORCH DCORCHcompoundStmt : ILLAVE localDeclarations statementList DLLAVElocalDeclarations : localDeclarations varDeclarationlocalDeclarations :  emptystatementList : statementList statementstatementList : emptystatement : expressionStmtstatement : compoundStmtstatement : selectionStmtstatement : iterationStmtstatement : returnStmtexpressionStmt : expression PUNTOCexpressionStmt : PUNTOCselectionStmt : IF IPAREN expression DPAREN statementselectionStmt :  IF IPAREN expression DPAREN statement ELSE statementiterationStmt :  WHILE IPAREN expression DPAREN statementreturnStmt :  RETURN PUNTOCreturnStmt :  RETURN expression PUNTOCexpression :  var ASIGN expressionexpression :  simpleExpressionvar :  IDvar :  ID ICORCH expression DCORCHsimpleExpression :  additiveExpression relop additiveExpressionsimpleExpression :  additiveExpressionrelop : MENORIrelop : MENORrelop : MAYORrelop : MAYORIrelop : IGUALrelop : DISTadditiveExpression : additiveExpression addop termadditiveExpression : termaddop : SUMAaddop : RESTAterm : term mulop factorterm : factormulop : MULTImulop : DIVIfactor : IPAREN expression DPARENfactor : varfactor : callfactor : NUMcall : ID IPAREN args DPARENargs : argListargs : emptyargList : argList COMA expressionargList : expressionempty :'
    
_lr_action_items = {'MULTI':([42,43,45,46,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,-36,77,-54,77,-55,-50,-37,-58,]),'RETURN':([13,24,26,30,31,32,33,35,37,40,44,47,48,50,54,55,58,79,80,94,98,99,101,102,103,],[-6,-7,-63,-19,-63,-18,36,-21,-24,-23,-20,-28,-25,-26,-17,-22,-32,-27,-33,36,36,-31,-29,36,-30,]),'VOID':([0,1,3,6,7,9,12,13,23,24,26,27,30,31,32,54,],[4,-4,4,-3,-5,-2,15,-6,4,-7,-63,-10,-19,4,-18,-17,]),'ILLAVE':([13,22,24,26,30,31,32,33,35,37,40,44,47,48,50,54,55,58,79,80,94,98,99,101,102,103,],[-6,26,-7,-63,-19,-63,-18,26,-21,-24,-23,-20,-28,-25,-26,-17,-22,-32,-27,-33,26,26,-31,-29,26,-30,]),'IGUAL':([42,43,45,46,49,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,68,-36,-47,-54,-46,-55,-50,-37,-58,]),'WHILE':([13,24,26,30,31,32,33,35,37,40,44,47,48,50,54,55,58,79,80,94,98,99,101,102,103,],[-6,-7,-63,-19,-63,-18,38,-21,-24,-23,-20,-28,-25,-26,-17,-22,-32,-27,-33,38,38,-31,-29,38,-30,]),'DCORCH':([14,25,39,42,43,45,46,49,51,53,82,83,84,85,86,87,93,95,96,],[20,29,-35,-57,-56,-51,-55,-39,-36,-47,-54,-34,-46,-55,-38,95,-50,-37,-58,]),'DIST':([42,43,45,46,49,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,64,-36,-47,-54,-46,-55,-50,-37,-58,]),'RESTA':([42,43,45,46,49,51,53,82,84,85,86,93,95,96,],[-57,-56,-51,-55,70,-36,-47,-54,-46,-55,70,-50,-37,-58,]),'SUMA':([42,43,45,46,49,51,53,82,84,85,86,93,95,96,],[-57,-56,-51,-55,72,-36,-47,-54,-46,-55,72,-50,-37,-58,]),'IPAREN':([10,13,24,26,30,31,32,33,35,36,37,38,40,41,44,47,48,50,51,52,54,55,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,97,98,99,101,102,103,],[12,-6,-7,-63,-19,-63,-18,41,-21,41,-24,60,-23,41,-20,-28,-25,-26,74,75,-17,-22,-32,41,41,41,-45,41,-43,-40,-44,-41,-49,-42,-48,41,41,41,-53,-52,41,-27,-33,41,41,41,-31,-29,41,-30,]),'NUM':([11,13,24,26,30,31,32,33,35,36,37,40,41,44,47,48,50,54,55,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,97,98,99,101,102,103,],[14,-6,-7,-63,-19,-63,-18,42,-21,42,-24,-23,42,-20,-28,-25,-26,-17,-22,-32,42,42,42,-45,42,-43,-40,-44,-41,-49,-42,-48,42,42,42,-53,-52,42,-27,-33,42,42,42,-31,-29,42,-30,]),'PUNTOC':([10,13,20,24,26,30,31,32,33,35,36,37,39,40,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,79,80,82,83,84,85,86,93,94,95,96,98,99,101,102,103,],[13,-6,24,-7,-63,-19,-63,-18,47,-21,58,-24,-35,-23,-57,-56,-20,-51,-55,-28,-25,-39,-26,-36,-47,-17,-22,79,13,-32,80,-27,-33,-54,-34,-46,-55,-38,-50,47,-37,-58,47,-31,-29,47,-30,]),'MAYOR':([42,43,45,46,49,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,71,-36,-47,-54,-46,-55,-50,-37,-58,]),'$end':([1,3,5,6,7,9,13,24,27,54,],[-4,-1,0,-3,-5,-2,-6,-7,-10,-17,]),'DIVI':([42,43,45,46,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,-36,76,-54,76,-55,-50,-37,-58,]),'ICORCH':([10,21,51,57,],[11,25,73,11,]),'DPAREN':([15,17,18,19,21,28,29,39,42,43,45,46,49,51,53,61,74,81,82,83,84,85,86,88,89,90,91,92,93,95,96,100,],[-12,22,-14,-11,-15,-13,-16,-35,-57,-56,-51,-55,-39,-36,-47,82,-63,94,-54,-34,-46,-55,-38,96,-59,-62,-60,98,-50,-37,-58,-61,]),'ELSE':([37,40,47,48,50,54,55,58,79,80,99,101,103,],[-24,-23,-28,-25,-26,-17,-22,-32,-27,-33,-31,-29,-30,]),'COMA':([18,19,21,28,29,39,42,43,45,46,49,51,53,82,83,84,85,86,89,90,93,95,96,100,],[-14,23,-15,-13,-16,-35,-57,-56,-51,-55,-39,-36,-47,-54,-34,-46,-55,-38,97,-62,-50,-37,-58,-61,]),'ASIGN':([46,51,95,],[62,-36,-37,]),'ID':([2,4,8,13,15,16,24,26,30,31,32,33,34,35,36,37,40,41,44,47,48,50,54,55,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,97,98,99,101,102,103,],[-8,-9,10,-6,-9,21,-7,-63,-19,-63,-18,51,57,-21,51,-24,-23,51,-20,-28,-25,-26,-17,-22,-32,51,51,51,-45,51,-43,-40,-44,-41,-49,-42,-48,51,51,51,-53,-52,51,-27,-33,51,51,51,-31,-29,51,-30,]),'IF':([13,24,26,30,31,32,33,35,37,40,44,47,48,50,54,55,58,79,80,94,98,99,101,102,103,],[-6,-7,-63,-19,-63,-18,52,-21,-24,-23,-20,-28,-25,-26,-17,-22,-32,-27,-33,52,52,-31,-29,52,-30,]),'MAYORI':([42,43,45,46,49,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,66,-36,-47,-54,-46,-55,-50,-37,-58,]),'DLLAVE':([13,24,26,30,31,32,33,35,37,40,44,47,48,50,54,55,58,79,80,99,101,103,],[-6,-7,-63,-19,-63,-18,54,-21,-24,-23,-20,-28,-25,-26,-17,-22,-32,-27,-33,-31,-29,-30,]),'MENORI':([42,43,45,46,49,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,67,-36,-47,-54,-46,-55,-50,-37,-58,]),'INT':([0,1,3,6,7,9,12,13,23,24,26,27,30,31,32,54,],[2,-4,2,-3,-5,-2,2,-6,2,-7,-63,-10,-19,2,-18,-17,]),'MENOR':([42,43,45,46,49,51,53,82,84,85,93,95,96,],[-57,-56,-51,-55,69,-36,-47,-54,-46,-55,-50,-37,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'varDeclaration':([0,3,31,],[1,1,32,]),'selectionStmt':([33,94,98,102,],[37,37,37,37,]),'statementList':([31,],[33,]),'simpleExpression':([33,36,41,60,62,73,74,75,94,97,98,102,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'args':([74,],[88,]),'param':([12,23,],[18,28,]),'program':([0,],[5,]),'params':([12,],[17,]),'statement':([33,94,98,102,],[44,99,101,103,]),'factor':([33,36,41,60,62,63,65,73,74,75,78,94,97,98,102,],[45,45,45,45,45,45,45,45,45,45,93,45,45,45,45,]),'var':([33,36,41,60,62,63,65,73,74,75,78,94,97,98,102,],[46,46,46,46,46,85,85,46,46,46,85,46,46,46,46,]),'call':([33,36,41,60,62,63,65,73,74,75,78,94,97,98,102,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'argList':([74,],[89,]),'empty':([26,31,74,],[30,35,91,]),'localDeclarations':([26,],[31,]),'additiveExpression':([33,36,41,60,62,65,73,74,75,94,97,98,102,],[49,49,49,49,49,86,49,49,49,49,49,49,49,]),'addop':([49,86,],[63,63,]),'funDeclaration':([0,3,],[7,7,]),'paramList':([12,],[19,]),'declarationList':([0,],[3,]),'declaration':([0,3,],[6,9,]),'returnStmt':([33,94,98,102,],[50,50,50,50,]),'compoundStmt':([22,33,94,98,102,],[27,40,40,40,40,]),'term':([33,36,41,60,62,63,65,73,74,75,94,97,98,102,],[53,53,53,53,53,84,53,53,53,53,53,53,53,53,]),'relop':([49,],[65,]),'expressionStmt':([33,94,98,102,],[55,55,55,55,]),'iterationStmt':([33,94,98,102,],[48,48,48,48,]),'mulop':([53,84,],[78,78,]),'expression':([33,36,41,60,62,73,74,75,94,97,98,102,],[56,59,61,81,83,87,90,92,56,100,56,56,]),'typeSpecifier':([0,3,12,23,31,],[8,8,16,16,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarationList','program',1,'p_program','parser.py',19),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declaration_list1','parser.py',24),
  ('declarationList -> declaration','declarationList',1,'p_declaration_list2','parser.py',37),
  ('declaration -> varDeclaration','declaration',1,'p_declaration1','parser.py',42),
  ('declaration -> funDeclaration','declaration',1,'p_declaration2','parser.py',47),
  ('varDeclaration -> typeSpecifier ID PUNTOC','varDeclaration',3,'p_var_declaration1','parser.py',52),
  ('varDeclaration -> typeSpecifier ID ICORCH NUM DCORCH PUNTOC','varDeclaration',6,'p_var_declaration2','parser.py',57),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_type_specifier1','parser.py',62),
  ('typeSpecifier -> VOID','typeSpecifier',1,'p_type_specifier2','parser.py',67),
  ('funDeclaration -> typeSpecifier ID IPAREN params DPAREN compoundStmt','funDeclaration',6,'p_fun_declaration','parser.py',72),
  ('params -> paramList','params',1,'p_params1','parser.py',77),
  ('params -> VOID','params',1,'p_params2','parser.py',82),
  ('paramList -> paramList COMA param','paramList',3,'p_paramList1','parser.py',87),
  ('paramList -> param','paramList',1,'p_paramList2','parser.py',100),
  ('param -> typeSpecifier ID','param',2,'p_param1','parser.py',105),
  ('param -> typeSpecifier ID ICORCH DCORCH','param',4,'p_param2','parser.py',110),
  ('compoundStmt -> ILLAVE localDeclarations statementList DLLAVE','compoundStmt',4,'p_compoundStmt','parser.py',115),
  ('localDeclarations -> localDeclarations varDeclaration','localDeclarations',2,'p_localDeclarations1','parser.py',120),
  ('localDeclarations -> empty','localDeclarations',1,'p_localDeclarationsEmpty','parser.py',133),
  ('statementList -> statementList statement','statementList',2,'p_statementList1','parser.py',138),
  ('statementList -> empty','statementList',1,'p_statementListEmpty','parser.py',151),
  ('statement -> expressionStmt','statement',1,'p_statement1','parser.py',156),
  ('statement -> compoundStmt','statement',1,'p_statement2','parser.py',161),
  ('statement -> selectionStmt','statement',1,'p_statement3','parser.py',166),
  ('statement -> iterationStmt','statement',1,'p_statement4','parser.py',171),
  ('statement -> returnStmt','statement',1,'p_statement5','parser.py',176),
  ('expressionStmt -> expression PUNTOC','expressionStmt',2,'p_expressionStmt1','parser.py',181),
  ('expressionStmt -> PUNTOC','expressionStmt',1,'p_expressionStmt2','parser.py',186),
  ('selectionStmt -> IF IPAREN expression DPAREN statement','selectionStmt',5,'p_selectionStmt1','parser.py',191),
  ('selectionStmt -> IF IPAREN expression DPAREN statement ELSE statement','selectionStmt',7,'p_selectionStmt2','parser.py',196),
  ('iterationStmt -> WHILE IPAREN expression DPAREN statement','iterationStmt',5,'p_iterationStmt','parser.py',201),
  ('returnStmt -> RETURN PUNTOC','returnStmt',2,'p_returnStmt1','parser.py',205),
  ('returnStmt -> RETURN expression PUNTOC','returnStmt',3,'p_returnStmt2','parser.py',209),
  ('expression -> var ASIGN expression','expression',3,'p_expression1','parser.py',213),
  ('expression -> simpleExpression','expression',1,'p_expression2','parser.py',217),
  ('var -> ID','var',1,'p_var1','parser.py',221),
  ('var -> ID ICORCH expression DCORCH','var',4,'p_var2','parser.py',225),
  ('simpleExpression -> additiveExpression relop additiveExpression','simpleExpression',3,'p_simpleExpression1','parser.py',229),
  ('simpleExpression -> additiveExpression','simpleExpression',1,'p_simpleExpression2','parser.py',233),
  ('relop -> MENORI','relop',1,'p_relop1','parser.py',237),
  ('relop -> MENOR','relop',1,'p_relop2','parser.py',241),
  ('relop -> MAYOR','relop',1,'p_relop3','parser.py',245),
  ('relop -> MAYORI','relop',1,'p_relop4','parser.py',249),
  ('relop -> IGUAL','relop',1,'p_relop5','parser.py',253),
  ('relop -> DIST','relop',1,'p_relop6','parser.py',257),
  ('additiveExpression -> additiveExpression addop term','additiveExpression',3,'p_additiveExpression1','parser.py',261),
  ('additiveExpression -> term','additiveExpression',1,'p_additiveExpression2','parser.py',265),
  ('addop -> SUMA','addop',1,'p_addop1','parser.py',269),
  ('addop -> RESTA','addop',1,'p_addop2','parser.py',273),
  ('term -> term mulop factor','term',3,'p_term1','parser.py',277),
  ('term -> factor','term',1,'p_term2','parser.py',281),
  ('mulop -> MULTI','mulop',1,'p_mulop1','parser.py',285),
  ('mulop -> DIVI','mulop',1,'p_mulop2','parser.py',289),
  ('factor -> IPAREN expression DPAREN','factor',3,'p_factor1','parser.py',293),
  ('factor -> var','factor',1,'p_factor2','parser.py',297),
  ('factor -> call','factor',1,'p_factor3','parser.py',301),
  ('factor -> NUM','factor',1,'p_factor4','parser.py',305),
  ('call -> ID IPAREN args DPAREN','call',4,'p_call','parser.py',309),
  ('args -> argList','args',1,'p_args1','parser.py',313),
  ('args -> empty','args',1,'p_argsEmpty','parser.py',317),
  ('argList -> argList COMA expression','argList',3,'p_argList1','parser.py',321),
  ('argList -> expression','argList',1,'p_argList2','parser.py',325),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',329),
]
