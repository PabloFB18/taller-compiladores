digraph G {
	"program1" -> "var1: int aNumber1 : int"
	"program1" -> "var2: int aNumber2 : int"
	"program1" -> "var3: int anArray[123] : int"
	"program1" -> "var4: void aVariable : void"
	"program1" -> "var5: void anotherArray[234] : void"
	"program1" -> "function1: void aProcedure1 : void"
	"program1" -> "function2: void aProcedure2 : void"
	"function2: void aProcedure2 : void" -> "compound_stmt1"
	"program1" -> "function3: int aProcedure3 : int"
	"function3: int aProcedure3 : int" -> "compound_stmt2"
	"program1" -> "function4: int aProcedure4 : int"
	"function4: int aProcedure4 : int" -> "param1: int a1[] : int"
	"function4: int aProcedure4 : int" -> "param2: void a2[] : void"
	"function4: int aProcedure4 : int" -> "param3: int aa1 : int"
	"function4: int aProcedure4 : int" -> "param4: void aa2 : void"
	"program1" -> "function5: int aProcedure4 : int"
	"function5: int aProcedure4 : int" -> "param5: void aNum1[] : void"
	"function5: int aProcedure4 : int" -> "param6: void aNum2[] : void"
	"function5: int aProcedure4 : int" -> "param7: int anArray1 : int"
	"function5: int aProcedure4 : int" -> "param8: void anArray2 : void"
	"program1" -> "function6: int aProcedure4 : int"
	"function6: int aProcedure4 : int" -> "param9: int aNum1[] : int"
	"function6: int aProcedure4 : int" -> "param10: void aNum2[] : void"
	"function6: int aProcedure4 : int" -> "param11: int anArray1 : int"
	"program1" -> "function7: int aProcedure4 : int"
	"function7: int aProcedure4 : int" -> "compound_stmt3"
	"compound_stmt3" -> "var6: int aNum3 : int"
	"compound_stmt3" -> "var7: int anArray3[456] : int"
	"compound_stmt3" -> "var8: void aNum4 : void"
	"compound_stmt3" -> "var9: void anArray4[78] : void"
	"compound_stmt3" -> "var10: int aNum5 : int"
	"compound_stmt3" -> "assign1 : int"
	"assign1 : int" -> "var1: aNum3 : int"
	"assign1 : int" -> "var2: aNum1 : int"
	"compound_stmt3" -> "assign2 : ERROR"
	"assign2 : ERROR" -> "var3: aNum2 : void"
	"assign2 : ERROR" -> "SIGNO1: + : int"
	"SIGNO1: + : int" -> "var4: aNum3 : int"
	"SIGNO1: + : int" -> "NUM1: 01"
	"compound_stmt3" -> "assign3 : int"
	"assign3 : int" -> "var5: anArray3 : int"
	"var5: anArray3 : int" -> "NUM2: 00"
	"assign3 : int" -> "var6: anArray1 : int"
	"var6: anArray1 : int" -> "NUM3: 02"
	"compound_stmt3" -> "assign4 : ERROR"
	"assign4 : ERROR" -> "var7: anArray2 : void"
	"var7: anArray2 : void" -> "NUM4: 03"
	"assign4 : ERROR" -> "var8: anarray3 : ERROR"
	"var8: anarray3 : ERROR" -> "NUM5: 04"
	"compound_stmt3" -> "while1"
	"while1" -> "COMPARADOR1: > : ERROR"
	"COMPARADOR1: > : ERROR" -> "var9: aNum3 : int"
	"COMPARADOR1: > : ERROR" -> "var10: aNum4 : ERROR"
	"compound_stmt3" -> "while2"
	"while2" -> "COMPARADOR2: >= : ERROR"
	"COMPARADOR2: >= : ERROR" -> "SIGNO2: + : int"
	"SIGNO2: + : int" -> "var11: aNum3 : int"
	"SIGNO2: + : int" -> "NUM6: 02"
	"COMPARADOR2: >= : ERROR" -> "SIGNO1: * : ERROR"
	"SIGNO1: * : ERROR" -> "NUM7: 03"
	"SIGNO1: * : ERROR" -> "var12: aNum5 : ERROR"
	"while2" -> "compound_stmt4"
	"compound_stmt4" -> "return1"
	"compound_stmt3" -> "if1"
	"if1" -> "NUM8: 23"
	"compound_stmt3" -> "if_else2"
	"if_else2" -> "var13: aNum5 : ERROR"
	"compound_stmt3" -> "if3"
	"if3" -> "COMPARADOR3: <= : ERROR"
	"COMPARADOR3: <= : ERROR" -> "SIGNO3: - : ERROR"
	"SIGNO3: - : ERROR" -> "SIGNO2: * : ERROR"
	"SIGNO2: * : ERROR" -> "NUM9: 05"
	"SIGNO2: * : ERROR" -> "var14: aNum5 : ERROR"
	"SIGNO3: - : ERROR" -> "NUM10: 04"
	"COMPARADOR3: <= : ERROR" -> "SIGNO4: + : ERROR"
	"SIGNO4: + : ERROR" -> "var15: aNum3 : int"
	"SIGNO4: + : ERROR" -> "SIGNO3: * : ERROR"
	"SIGNO3: * : ERROR" -> "NUM11: 02"
	"SIGNO3: * : ERROR" -> "SIGNO5: - : ERROR"
	"SIGNO5: - : ERROR" -> "SIGNO4: / : ERROR"
	"SIGNO4: / : ERROR" -> "var16: aNum5 : ERROR"
	"SIGNO4: / : ERROR" -> "NUM12: 03"
	"SIGNO5: - : ERROR" -> "NUM13: 07"
	"if3" -> "assign5 : ERROR"
	"assign5 : ERROR" -> "var17: aNum5 : int"
	"assign5 : ERROR" -> "SIGNO5: * : ERROR"
	"SIGNO5: * : ERROR" -> "NUM14: 03"
	"SIGNO5: * : ERROR" -> "var18: aNum5 : ERROR"
	"compound_stmt3" -> "if_else4"
	"if_else4" -> "SIGNO6: * : int"
	"SIGNO6: * : int" -> "SIGNO6: - : int"
	"SIGNO6: - : int" -> "var19: aNum5 : int"
	"SIGNO6: - : int" -> "var20: aNum3 : int"
	"SIGNO6: * : int" -> "SIGNO7: + : int"
	"SIGNO7: + : int" -> "SIGNO7: / : int"
	"SIGNO7: / : int" -> "var21: aNum5 : int"
	"SIGNO7: / : int" -> "NUM15: 03"
	"SIGNO7: + : int" -> "SIGNO8: * : int"
	"SIGNO8: * : int" -> "NUM16: 04"
	"SIGNO8: * : int" -> "var22: aNum3 : int"
	"if_else4" -> "compound_stmt5"
	"compound_stmt5" -> "assign6 : int"
	"assign6 : int" -> "var23: aNum1 : int"
	"assign6 : int" -> "var24: aNum3 : int"
	"compound_stmt5" -> "call1: output : void"
	"call1: output : void" -> "var25: aNum3 : int"
	"if_else4" -> "compound_stmt6"
	"compound_stmt6" -> "assign7 : ERROR"
	"assign7 : ERROR" -> "var26: aNum4 : void"
	"assign7 : ERROR" -> "call2: input : int"
	"compound_stmt6" -> "return2 : int"
	"return2 : int" -> "var27: aNum3 : int"
	"compound_stmt3" -> "return3 : int"
	"return3 : int" -> "SIGNO9: / : int"
	"SIGNO9: / : int" -> "NUM17: 05"
	"SIGNO9: / : int" -> "NUM18: 00"
	"function7: int aProcedure4 : int" -> "param12: int aNum1[] : int"
	"function7: int aProcedure4 : int" -> "param13: void aNum2[] : void"
	"function7: int aProcedure4 : int" -> "param14: int anArray1 : int"
	"function7: int aProcedure4 : int" -> "param15: void anArray2 : void"
	"function7: int aProcedure4 : int" -> "param16: int a1[] : int"
	"program1" -> "function8: void main : void"
	"function8: void main : void" -> "compound_stmt7"
	"compound_stmt7" -> "var11: int aNumber1 : int"
	"compound_stmt7" -> "call3: aProcedure1 : void"
	"compound_stmt7" -> "call4: aProcedure12 : ERROR"
	"compound_stmt7" -> "call5: aProcedure1 : ERROR"
	"call5: aProcedure1 : ERROR" -> "var28: aNumber1 : ERROR"
}