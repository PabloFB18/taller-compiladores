digraph G {
	"program1" -> "var1: int aNumber1 : int"
	"program1" -> "var2: int aNumber2 : int"
	"program1" -> "var3: int anArray[123] : int"
	"program1" -> "var4: void aVariable : void"
	"program1" -> "var5: void anotherArray[234] : void"
	"program1" -> "function1: int aProcedure3 : int"
	"function1: int aProcedure3 : int" -> "compound_stmt1"
	"compound_stmt1" -> "return1 : int"
	"return1 : int" -> "NUM1: 05"
	"function1: int aProcedure3 : int" -> "param1: int a1[] : int"
	"function1: int aProcedure3 : int" -> "param2: void a2[] : void"
	"function1: int aProcedure3 : int" -> "param3: int aa1 : int"
	"function1: int aProcedure3 : int" -> "param4: void aa2 : void"
	"program1" -> "function2: int aProcedure3 : int"
	"function2: int aProcedure3 : int" -> "compound_stmt2"
	"compound_stmt2" -> "return2 : int"
	"return2 : int" -> "NUM2: 05"
	"function2: int aProcedure3 : int" -> "param5: void a1[] : void"
	"function2: int aProcedure3 : int" -> "param6: void a2[] : void"
	"function2: int aProcedure3 : int" -> "param7: int aa1 : int"
	"function2: int aProcedure3 : int" -> "param8: void aa2 : void"
	"program1" -> "function3: int aProcedure3 : int"
	"function3: int aProcedure3 : int" -> "compound_stmt3"
	"compound_stmt3" -> "return3 : int"
	"return3 : int" -> "NUM3: 03"
	"function3: int aProcedure3 : int" -> "param9: int aNum1[] : int"
	"function3: int aProcedure3 : int" -> "param10: void aNum2[] : void"
	"function3: int aProcedure3 : int" -> "param11: int anArray1 : int"
	"program1" -> "function4: int aProcedure3 : int"
	"function4: int aProcedure3 : int" -> "compound_stmt4"
	"compound_stmt4" -> "var6: int aNum3 : int"
	"compound_stmt4" -> "var7: int anArray3[456] : int"
	"compound_stmt4" -> "var8: void aNum41 : void"
	"compound_stmt4" -> "var9: void anArray4[78] : void"
	"compound_stmt4" -> "var10: int aNum5 : int"
	"compound_stmt4" -> "var11: int aNum4 : int"
	"compound_stmt4" -> "assign1 : int"
	"assign1 : int" -> "var1: aNum4 : int"
	"assign1 : int" -> "NUM4: 03"
	"compound_stmt4" -> "assign2 : int"
	"assign2 : int" -> "var2: aNum5 : int"
	"assign2 : int" -> "var3: aNum4 : int"
	"compound_stmt4" -> "assign3 : int"
	"assign3 : int" -> "var4: aNum3 : int"
	"assign3 : int" -> "var5: aNum1 : int"
	"compound_stmt4" -> "assign4 : int"
	"assign4 : int" -> "var6: aNum2 : int"
	"assign4 : int" -> "SIGNO1: + : int"
	"SIGNO1: + : int" -> "var7: aNum3 : int"
	"SIGNO1: + : int" -> "NUM5: 01"
	"compound_stmt4" -> "assign5 : int"
	"assign5 : int" -> "var8: anArray3 : int"
	"var8: anArray3 : int" -> "NUM6: 00"
	"assign5 : int" -> "var9: anArray1 : int"
	"var9: anArray1 : int" -> "NUM7: 02"
	"compound_stmt4" -> "assign6 : int"
	"assign6 : int" -> "var10: anArray2 : int"
	"var10: anArray2 : int" -> "NUM8: 03"
	"assign6 : int" -> "var11: anArray3 : int"
	"var11: anArray3 : int" -> "NUM9: 04"
	"compound_stmt4" -> "while1"
	"while1" -> "COMPARADOR1: > : int"
	"COMPARADOR1: > : int" -> "var12: aNum3 : int"
	"COMPARADOR1: > : int" -> "var13: aNum4 : int"
	"while1" -> "assign7 : int"
	"assign7 : int" -> "var14: aNum3 : int"
	"assign7 : int" -> "NUM10: 05"
	"compound_stmt4" -> "while2"
	"while2" -> "COMPARADOR2: >= : int"
	"COMPARADOR2: >= : int" -> "SIGNO2: + : int"
	"SIGNO2: + : int" -> "var15: aNum3 : int"
	"SIGNO2: + : int" -> "NUM11: 02"
	"COMPARADOR2: >= : int" -> "SIGNO1: * : int"
	"SIGNO1: * : int" -> "NUM12: 03"
	"SIGNO1: * : int" -> "var16: aNum5 : int"
	"while2" -> "compound_stmt5"
	"compound_stmt5" -> "return4 : int"
	"return4 : int" -> "NUM13: 06"
	"compound_stmt4" -> "if1"
	"if1" -> "NUM14: 23"
	"if1" -> "assign8 : int"
	"assign8 : int" -> "var17: aNum3 : int"
	"assign8 : int" -> "NUM15: 06"
	"compound_stmt4" -> "if_else2"
	"if_else2" -> "var18: aNum5 : int"
	"if_else2" -> "assign9 : int"
	"assign9 : int" -> "var19: aNum3 : int"
	"assign9 : int" -> "NUM16: 07"
	"if_else2" -> "assign10 : int"
	"assign10 : int" -> "var20: aNum3 : int"
	"assign10 : int" -> "NUM17: 08"
	"compound_stmt4" -> "if3"
	"if3" -> "COMPARADOR3: <= : int"
	"COMPARADOR3: <= : int" -> "SIGNO3: - : int"
	"SIGNO3: - : int" -> "SIGNO2: * : int"
	"SIGNO2: * : int" -> "NUM18: 05"
	"SIGNO2: * : int" -> "var21: aNum5 : int"
	"SIGNO3: - : int" -> "NUM19: 04"
	"COMPARADOR3: <= : int" -> "SIGNO4: + : int"
	"SIGNO4: + : int" -> "var22: aNum3 : int"
	"SIGNO4: + : int" -> "SIGNO3: * : int"
	"SIGNO3: * : int" -> "NUM20: 02"
	"SIGNO3: * : int" -> "SIGNO5: - : int"
	"SIGNO5: - : int" -> "SIGNO4: / : int"
	"SIGNO4: / : int" -> "var23: aNum5 : int"
	"SIGNO4: / : int" -> "NUM21: 03"
	"SIGNO5: - : int" -> "NUM22: 07"
	"if3" -> "assign11 : int"
	"assign11 : int" -> "var24: aNum5 : int"
	"assign11 : int" -> "SIGNO5: * : int"
	"SIGNO5: * : int" -> "NUM23: 03"
	"SIGNO5: * : int" -> "var25: aNum5 : int"
	"compound_stmt4" -> "if_else4"
	"if_else4" -> "SIGNO6: * : int"
	"SIGNO6: * : int" -> "SIGNO6: - : int"
	"SIGNO6: - : int" -> "var26: aNum5 : int"
	"SIGNO6: - : int" -> "var27: aNum3 : int"
	"SIGNO6: * : int" -> "SIGNO7: + : int"
	"SIGNO7: + : int" -> "SIGNO7: / : int"
	"SIGNO7: / : int" -> "var28: aNum5 : int"
	"SIGNO7: / : int" -> "NUM24: 03"
	"SIGNO7: + : int" -> "SIGNO8: * : int"
	"SIGNO8: * : int" -> "NUM25: 04"
	"SIGNO8: * : int" -> "var29: aNum3 : int"
	"if_else4" -> "compound_stmt6"
	"compound_stmt6" -> "assign12 : int"
	"assign12 : int" -> "var30: aNum1 : int"
	"assign12 : int" -> "var31: aNum3 : int"
	"compound_stmt6" -> "assign13 : int"
	"assign13 : int" -> "var32: aNum1 : int"
	"assign13 : int" -> "call1: input : int"
	"compound_stmt6" -> "call2: output : void"
	"call2: output : void" -> "var33: aNum3 : int"
	"if_else4" -> "compound_stmt7"
	"compound_stmt7" -> "assign14 : int"
	"assign14 : int" -> "var34: aNum4 : int"
	"assign14 : int" -> "call3: input : int"
	"compound_stmt7" -> "return5 : int"
	"return5 : int" -> "var35: aNum3 : int"
	"compound_stmt4" -> "return6 : int"
	"return6 : int" -> "SIGNO9: / : int"
	"SIGNO9: / : int" -> "NUM26: 05"
	"SIGNO9: / : int" -> "NUM27: 00"
	"function4: int aProcedure3 : int" -> "param12: int aNum1[] : int"
	"function4: int aProcedure3 : int" -> "param13: int aNum2[] : int"
	"function4: int aProcedure3 : int" -> "param14: int anArray1 : int"
	"function4: int aProcedure3 : int" -> "param15: int anArray2 : int"
	"function4: int aProcedure3 : int" -> "param16: int a1[] : int"
	"program1" -> "function5: void fun_void : void"
	"program1" -> "function6: void main : void"
	"function6: void main : void" -> "compound_stmt8"
	"compound_stmt8" -> "var12: int a : int"
	"compound_stmt8" -> "var13: int b : int"
	"compound_stmt8" -> "var14: void c : void"
	"compound_stmt8" -> "var15: void d : void"
	"compound_stmt8" -> "var16: int e[02] : int"
	"compound_stmt8" -> "var17: int f[45] : int"
	"compound_stmt8" -> "var18: void g[23] : void"
	"compound_stmt8" -> "assign15 : int"
	"assign15 : int" -> "var36: aNumber1 : int"
	"assign15 : int" -> "NUM28: 00"
	"compound_stmt8" -> "assign16 : int"
	"assign16 : int" -> "var37: e : int"
	"assign16 : int" -> "NUM29: 01"
	"compound_stmt8" -> "assign17 : int"
	"assign17 : int" -> "var38: f : int"
	"assign17 : int" -> "NUM30: 03"
	"compound_stmt8" -> "assign18 : int"
	"assign18 : int" -> "var39: a : int"
	"assign18 : int" -> "var40: aNumber1 : int"
	"compound_stmt8" -> "assign19 : int"
	"assign19 : int" -> "var41: b : int"
	"assign19 : int" -> "NUM31: 01"
	"compound_stmt8" -> "assign20 : void"
	"assign20 : void" -> "var42: c : void"
	"assign20 : void" -> "call4: fun_void : void"
	"compound_stmt8" -> "assign21 : void"
	"assign21 : void" -> "var43: d : void"
	"assign21 : void" -> "call5: fun_void : void"
	"compound_stmt8" -> "assign22 : void"
	"assign22 : void" -> "var44: g : void"
	"assign22 : void" -> "call6: fun_void : void"
	"compound_stmt8" -> "call7: aProcedure3 : int"
	"call7: aProcedure3 : int" -> "var45: a : int"
	"call7: aProcedure3 : int" -> "var46: c : void"
	"call7: aProcedure3 : int" -> "var47: e : int"
	"call7: aProcedure3 : int" -> "var48: g : void"
	"compound_stmt8" -> "call8: aProcedure3 : int"
	"call8: aProcedure3 : int" -> "var49: c : void"
	"call8: aProcedure3 : int" -> "var50: d : void"
	"call8: aProcedure3 : int" -> "var51: e : int"
	"call8: aProcedure3 : int" -> "var52: g : void"
	"compound_stmt8" -> "call9: aProcedure3 : int"
	"call9: aProcedure3 : int" -> "var53: a : int"
	"call9: aProcedure3 : int" -> "var54: c : void"
	"call9: aProcedure3 : int" -> "var55: e : int"
	"compound_stmt8" -> "call10: aProcedure3 : int"
	"call10: aProcedure3 : int" -> "var56: a : int"
	"call10: aProcedure3 : int" -> "var57: b : int"
	"call10: aProcedure3 : int" -> "var58: f : int"
	"call10: aProcedure3 : int" -> "var59: e : int"
	"call10: aProcedure3 : int" -> "var60: a : int"
}