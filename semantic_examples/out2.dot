digraph G {
	"program1" -> "function1: void main : void"
	"function1: void main : void" -> "compound_stmt1"
	"compound_stmt1" -> "while1"
	"while1" -> "COMPARADOR1: == : int"
	"COMPARADOR1: == : int" -> "NUM1: 00"
	"COMPARADOR1: == : int" -> "NUM2: 00"
	"while1" -> "compound_stmt2"
	"compound_stmt2" -> "if1"
	"if1" -> "COMPARADOR2: <> : ERROR"
	"COMPARADOR2: <> : ERROR" -> "var1: a : ERROR"
	"COMPARADOR2: <> : ERROR" -> "NUM3: 01"
	"if1" -> "compound_stmt3"
	"compound_stmt3" -> "assign1 : ERROR"
	"assign1 : ERROR" -> "var2: c : ERROR"
	"assign1 : ERROR" -> "NUM4: 45"
	"compound_stmt3" -> "return1 : int"
	"return1 : int" -> "NUM5: 04"
	"compound_stmt2" -> "assign2 : ERROR"
	"assign2 : ERROR" -> "var3: a : ERROR"
	"assign2 : ERROR" -> "assign3 : ERROR"
	"assign3 : ERROR" -> "var4: t : ERROR"
	"assign3 : ERROR" -> "NUM6: 04"
	"compound_stmt1" -> "if2"
	"if2" -> "NUM7: 00"
	"if2" -> "compound_stmt4"
	"compound_stmt4" -> "assign4 : ERROR"
	"assign4 : ERROR" -> "var5: b : ERROR"
	"assign4 : ERROR" -> "SIGNO1: + : int"
	"SIGNO1: + : int" -> "NUM8: 54"
	"SIGNO1: + : int" -> "SIGNO1: * : int"
	"SIGNO1: * : int" -> "NUM9: 10"
	"SIGNO1: * : int" -> "NUM10: 05"
	"compound_stmt1" -> "call1: hola : ERROR"
	"call1: hola : ERROR" -> "var6: a : ERROR"
	"call1: hola : ERROR" -> "NUM11: 00"
	"compound_stmt1" -> "NUM12: 00"
	"function1: void main : void" -> "param1: int c_2[] : int"
	"function1: void main : void" -> "param2: int c_3[] : int"
	"program1" -> "var1: int b_1 : int"
	"program1" -> "var2: int a_1 : int"
}